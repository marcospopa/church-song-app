// lib/database.ts
export async function testConnection() {
  try {
    console.log('üîç Testing Supabase connection...')
    const { data, error, status, statusText } = await supabase
      .from('churches')
      .select('id')
      .limit(1)

    if (error) {
      console.error('‚ùå Connection test failed:', { status, statusText, message: error.message, code: error.code })
      if (error.message?.includes('404')) {
        console.error('üí° Tip: Make sure you are using the API URL, not the dashboard URL')
        console.error('üí° API URL format: https://your-project-id.supabase.co')
      }
      return false
    }

    console.log('‚úÖ Connection test successful')
    return true
  } catch (error) {
    console.error('‚ùå Connection test error:', error)
    return false
  }
}

// app/settings/page.tsx
"use client"

import { useEffect, useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Separator } from "@/components/ui/separator"
import { Save, Church, Bell, Database } from 'lucide-react'
import { Wifi, WifiOff, AlertCircle, RefreshCcw, Database as DbIcon } from "lucide-react"

type HealthResponse = {
  env: { urlSet: boolean; keySet: boolean; envOk: boolean }
  connected: boolean | null
  schemaOk: boolean | null
  stats:
    | { totalSongs: number; totalMembers: number; totalSetlists: number; upcomingEvents: number }
    | null
}

export default function SettingsPage() {
  const [checking, setChecking] = useState(true)
  const [envUrlSet, setEnvUrlSet] = useState(false)
  const [envKeySet, setEnvKeySet] = useState(false)
  const [envOk, setEnvOk] = useState(false)
  const [connected, setConnected] = useState<boolean | null>(null)
  const [schemaOk, setSchemaOk] = useState<boolean | null>(null)
  const [stats, setStats] = useState<{ songs: number; members: number; setlists: number; upcoming: number } | null>(
    null
  )
  const [errorMsg, setErrorMsg] = useState<string | null>(null)

  async function runChecks() {
    try {
      setChecking(true)
      setErrorMsg(null)

      const res = await fetch("/api/health", { cache: "no-store" })
      if (!res.ok) throw new Error("Health check failed")
      const data: HealthResponse = await res.json()

      setEnvUrlSet(data.env.urlSet)
      setEnvKeySet(data.env.keySet)
      setEnvOk(data.env.envOk)
      setConnected(data.connected)
      setSchemaOk(data.schemaOk)

      if (data.stats) {
        setStats({
          songs: data.stats.totalSongs ?? 0,
          members: data.stats.totalMembers ?? 0,
          setlists: data.stats.totalSetlists ?? 0,
          upcoming: data.stats.upcomingEvents ?? 0,
        })
      } else {
        setStats(null)
      }
    } catch (e: any) {
      setErrorMsg(e?.message || "Unknown error while checking connection.")
      setConnected(false)
      setSchemaOk(null)
      setStats(null)
    } finally {
      setChecking(false)
    }
  }

  useEffect(() => {
    runChecks()
  }, [])

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">Settings</h1>
        <p className="text-muted-foreground">Configure your worship team management preferences</p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <DbIcon className="h-5 w-5" />
            Database Connection
          </CardTitle>
          <CardDescription>View and test your Supabase connection</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Environment status */}
          <div className="grid gap-3 sm:grid-cols-2">
            <div className="space-y-1">
              <Label>Environment</Label>
              <div className="text-sm">
                URL:{" "}
                <span className={envUrlSet ? "text-green-600 font-medium" : "text-red-600 font-medium"}>
                  {envUrlSet ? "SET" : "MISSING"}
                </span>
              </div>
              <div className="text-sm">
                ANON KEY:{" "}
                <span className={envKeySet ? "text-green-600 font-medium" : "text-red-600 font-medium"}>
                  {envKeySet ? "SET" : "MISSING"}
                </span>
              </div>
            </div>
            <div className="space-y-1">
              <Label>Status</Label>
              <div className="flex items-center gap-2 text-sm">
                {checking ? (
                  <>
                    <RefreshCcw className="h-4 w-4 animate-spin" />
                    <span>Checking connection...</span>
                  </>
                ) : connected ? (
                  <>
                    <Wifi className="h-4 w-4 text-green-600" />
                    <span className="text-green-700 font-medium">Connected</span>
                  </>
                ) : (
                  <>
                    <WifiOff className="h-4 w-4 text-red-600" />
                    <span className="text-red-700 font-medium">Disconnected</span>
                  </>
                )}
              </div>
              <div className="flex items-center gap-2 text-sm">
                {schemaOk === null ? null : schemaOk ? (
                  <span className="text-green-700">Schema: OK</span>
                ) : (
                  <span className="text-orange-700">Schema: Setup required</span>
                )}
              </div>
            </div>
          </div>

          {/* Error or guidance */}
          {errorMsg && (
            <div className="flex items-center gap-2 text-red-700 text-sm">
              <AlertCircle className="h-4 w-4" />
              <span>{errorMsg}</span>
            </div>
          )}

          {!checking && envOk && connected && schemaOk === false && (
            <div className="text-sm space-y-2">
              <div className="flex items-center gap-2 text-orange-800">
                <AlertCircle className="h-4 w-4" />
                <span>Your database connection works, but tables need to be created.</span>
              </div>
              <ol className="list-decimal list-inside space-y-1">
                <li>Open your Supabase Dashboard ‚Üí SQL Editor</li>
                <li>
                  Run the scripts:
                  <code className="ml-1 bg-orange-100 px-2 py-0.5 rounded">scripts/create-tables.sql</code> or
                  <code className="ml-1 bg-orange-100 px-2 py-0.5 rounded">scripts/create-tables-v2.sql</code>
                </li>
                <li>
                  Optionally seed data:
                  <code className="ml-1 bg-orange-100 px-2 py-0.5 rounded">scripts/seed-data.sql</code>
                </li>
                <li>Click ‚ÄúRe-test‚Äù below.</li>
              </ol>
            </div>
          )}

          {!checking && !envOk && (
            <div className="text-sm space-y-2 text-red-700">
              <div className="flex items-center gap-2">
                <AlertCircle className="h-4 w-4" />
                <span>Your Supabase credentials are not configured.</span>
              </div>
              <ol className="list-decimal list-inside space-y-1">
                <li>Go to your Vercel project settings ‚Üí Environment Variables</li>
                <li>
                  Add:
                  <pre className="bg-red-50 border border-red-200 p-3 rounded mt-2 text-xs overflow-x-auto">{`NEXT_PUBLIC_SUPABASE_URL=https://your-project-id.supabase.co
    NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key-here`}</pre>
                </li>
                <li>Redeploy your application.</li>
              </ol>
            </div>
          )}

          {/* Quick stats when connected and schema OK */}
          {!checking && envOk && connected && schemaOk && stats && (
            <div className="grid gap-3 sm:grid-cols-4">
              <div className="text-sm">
                <div className="text-muted-foreground">Songs</div>
                <div className="text-lg font-semibold">{stats.songs}</div>
              </div>
              <div className="text-sm">
                <div className="text-muted-foreground">Members</div>
                <div className="text-lg font-semibold">{stats.members}</div>
              </div>
              <div className="text-sm">
                <div className="text-muted-foreground">Setlists</div>
                <div className="text-lg font-semibold">{stats.setlists}</div>
              </div>
              <div className="text-sm">
                <div className="text-muted-foreground">Upcoming</div>
                <div className="text-lg font-semibold">{stats.upcoming}</div>
              </div>
            </div>
          )}

          <div className="flex justify-end">
            <Button variant="outline" onClick={runChecks}>
              <RefreshCcw className="mr-2 h-4 w-4" />
              Re-test connection
            </Button>
          </div>
        </CardContent>
      </Card>

      <div className="grid gap-6">
        {/* Church Information */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Church className="h-5 w-5" />
              Church Information
            </CardTitle>
            <CardDescription>Basic information about your church</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid gap-4 md:grid-cols-2">
              <div className="space-y-2">
                <Label htmlFor="church-name">Church Name</Label>
                <Input id="church-name" defaultValue="Grace Community Church" />
              </div>
              <div className="space-y-2">
                <Label htmlFor="pastor-name">Pastor Name</Label>
                <Input id="pastor-name" defaultValue="Rev. John Smith" />
              </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="church-address">Address</Label>
              <Textarea id="church-address" defaultValue="123 Main Street, Anytown, ST 12345" />
            </div>
            <div className="grid gap-4 md:grid-cols-2">
              <div className="space-y-2">
                <Label htmlFor="church-phone">Phone</Label>
                <Input id="church-phone" defaultValue="(555) 123-4567" />
              </div>
              <div className="space-y-2">
                <Label htmlFor="church-email">Email</Label>
                <Input id="church-email" type="email" defaultValue="info@gracechurch.com" />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Notification Settings */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Bell className="h-5 w-5" />
              Notifications
            </CardTitle>
            <CardDescription>Manage your notification preferences</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label>Email Notifications</Label>
                <p className="text-sm text-muted-foreground">Receive email updates about schedule changes</p>
              </div>
              <Switch defaultChecked />
            </div>
            <Separator />
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label>Reminder Notifications</Label>
                <p className="text-sm text-muted-foreground">Get reminders before services and rehearsals</p>
              </div>
              <Switch defaultChecked />
            </div>
            <Separator />
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label>New Song Alerts</Label>
                <p className="text-sm text-muted-foreground">Notify when new songs are added to the database</p>
              </div>
              <Switch />
            </div>
          </CardContent>
        </Card>

        {/* Default Settings */}
        <Card>
          <CardHeader>
            <CardTitle>Default Settings</CardTitle>
            <CardDescription>Set default values for new items</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid gap-4 md:grid-cols-2">
              <div className="space-y-2">
                <Label htmlFor="default-key">Default Song Key</Label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="Select default key" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="C">C</SelectItem>
                    <SelectItem value="D">D</SelectItem>
                    <SelectItem value="E">E</SelectItem>
                    <SelectItem value="F">F</SelectItem>
                    <SelectItem value="G">G</SelectItem>
                    <SelectItem value="A">A</SelectItem>
                    <SelectItem value="B">B</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="default-tempo">Default Tempo (BPM)</Label>
                <Input id="default-tempo" type="number" defaultValue="120" />
              </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="service-duration">Default Service Duration (minutes)</Label>
              <Input id="service-duration" type="number" defaultValue="25" />
            </div>
          </CardContent>
        </Card>

        {/* Data Management */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Database className="h-5 w-5" />
              Data Management
            </CardTitle>
            <CardDescription>Backup and restore your data</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label>Automatic Backups</Label>
                <p className="text-sm text-muted-foreground">Automatically backup your data weekly</p>
              </div>
              <Switch defaultChecked />
            </div>
            <Separator />
            <div className="flex gap-4">
              <Button variant="outline">Export All Data</Button>
              <Button variant="outline">Import Data</Button>
            </div>
          </CardContent>
        </Card>

        {/* Save Settings */}
        <div className="flex justify-end">
          <Button>
            <Save className="mr-2 h-4 w-4" />
            Save Settings
          </Button>
        </div>
      </div>
    </div>
  )
}
